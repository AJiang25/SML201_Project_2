wc_airports$lat,
wc_airports$lng
)
)
return(wc_airports$code[closest_idx])
}
# Helper function to get flights based on pdt_seq
get_flights = function(dep_airport, arr_airport, pdt_seg) {
flights <- wc_flights %>%
filter(orig == dep_airport & dest == arr_airport)
print(dep_airport)
print(arr_airport)
if (pdt_seg == 1) {
flights <- flights %>% filter(dep >= 0 & dep <= 759)
} else if (pdt_seg == 2) {
flights <- flights %>% filter(dep >= 800 & dep <= 1559)
} else {
flights <- flights %>% filter(dep >= 1600 & dep <= 2359)
}
return(flights)
}
# Helper function to find connecting flights
find_connecting_flights = function(dep_airport, arr_airport, pdt_seg, num_connections) {
if (num_connections == 0) {
return(get_flights(dep_airport, arr_airport, pdt_seg))
}
all_routes <- data.frame()
intermediate_airports <- unique(wc_flights$orig)
for (int_airport in intermediate_airports) {
if (int_airport != dep_airport && int_airport != arr_airport) {
# Get first leg flights
first_leg <- get_flights(dep_airport, int_airport, pdt_seg)
if (nrow(first_leg) > 0) {
for (j in seq_len(nrow(first_leg))) {
second_leg <- wc_flights %>%
filter(
orig == int_airport,
dest == arr_airport,
dep >= first_leg$arr[j] + 100
)
if (nrow(second_leg) > 0) {
for (k in seq_len(nrow(second_leg))) {
route <- data.frame(
dep = first_leg$orig[j],
arr = second_leg$dest[k],
dep_time = first_leg$dep[j],
arr_time = second_leg$arr[k],
total_distance = dist_mi(
wc_airports$lat[wc_airports$code == dep_airport],
wc_airports$lng[wc_airports$code == dep_airport],
wc_airports$lat[wc_airports$code == arr_airport],
wc_airports$lng[wc_airports$code == arr_airport]
)
)
all_routes <- bind_rows(all_routes, route)
}
}
}
}
}
}
# Sort by total distance and return best option
return(all_routes %>% arrange(total_distance) %>% slice(1))
}
our_itinerary = itinerary(ctry = our_country, pdt = c(1, 3), conn = c(0, 2))
our_itinerary
itinerary = function(ctry, pdt, conn) {
# Filter for the matches in given ctry and arrange by date
country_matches <- wc_sched %>%
filter(ctry_a == ctry | ctry_b == ctry) %>%
arrange(match_dt)
print(country_matches)
# iterate through the matches, skipping the first match
for (i in 1:(nrow(country_matches) - 1)) {
dep_match <- country_matches[i, ]
arr_match <- country_matches[i + 1, ]
dep_airport <- get_airport(dep_match$lat, dep_match$lng)
arr_airport <- get_airport(arr_match$lat, arr_match$lng)
if (dep_airport == arr_airport) {
next
}
# Find best flight route based on connections
best_route <- find_connecting_flights(dep_airport, arr_airport, pdt[i], conn[i])
print(best_route)
# Calculate the departure and arrival dates
dep_date <- as.Date(dep_match$match_dt)
arr_date <- as.Date(dep_match$match_dt)
# Adjust the arrival date if the flight arrives after midnight
if (best_route$arr_time[1] < best_route$dep_time[1]) {
arr_date <- arr_date + 1
}
# Create itinerary for this leg and append it
leg_df <- data.frame(
flt = paste0(i, i+1),
leg = i,
dep = dep_airport,
arr = arr_airport,
dod = as.character(dep_date),
tod = best_route$dep_time[1],
doa = as.character(arr_date),
toa = best_route$arr_time[1],
distance = best_route$total_distance[1]
)
itinerary_df <- rbind(itinerary_df, leg_df)
}
return(itinerary_df)
}
# Helper function to get the nearest airport to a venue
get_airport = function(venue_lat, venue_lng) {
closest_idx <- which.min(
dist_mi(
venue_lat,
venue_lng,
wc_airports$lat,
wc_airports$lng
)
)
return(wc_airports$code[closest_idx])
}
# Helper function to get flights based on pdt_seq
get_flights = function(dep_airport, arr_airport, pdt_seg) {
flights <- wc_flights %>%
filter(orig == dep_airport & dest == arr_airport)
if (pdt_seg == 1) {
flights <- flights %>% filter(dep >= 0 & dep <= 759)
} else if (pdt_seg == 2) {
flights <- flights %>% filter(dep >= 800 & dep <= 1559)
} else {
flights <- flights %>% filter(dep >= 1600 & dep <= 2359)
}
return(flights)
}
# Helper function to find connecting flights
find_connecting_flights = function(dep_airport, arr_airport, pdt_seg, num_connections) {
if (num_connections == 0) {
return(get_flights(dep_airport, arr_airport, pdt_seg))
}
all_routes <- data.frame()
intermediate_airports <- unique(wc_flights$orig)
for (int_airport in intermediate_airports) {
if (int_airport != dep_airport && int_airport != arr_airport) {
# Get first leg flights
first_leg <- get_flights(dep_airport, int_airport, pdt_seg)
if (nrow(first_leg) > 0) {
for (j in seq_len(nrow(first_leg))) {
second_leg <- wc_flights %>%
filter(
orig == int_airport,
dest == arr_airport,
dep >= first_leg$arr[j] + 100
)
if (nrow(second_leg) > 0) {
for (k in seq_len(nrow(second_leg))) {
route <- data.frame(
dep = first_leg$orig[j],
arr = second_leg$dest[k],
dep_time = first_leg$dep[j],
arr_time = second_leg$arr[k],
total_distance = dist_mi(
wc_airports$lat[wc_airports$code == dep_airport],
wc_airports$lng[wc_airports$code == dep_airport],
wc_airports$lat[wc_airports$code == arr_airport],
wc_airports$lng[wc_airports$code == arr_airport]
)
)
all_routes <- bind_rows(all_routes, route)
}
}
}
}
}
}
# Sort by total distance and return best option
return(all_routes %>% arrange(total_distance) %>% slice(1))
}
our_itinerary = itinerary(ctry = our_country, pdt = c(1, 3), conn = c(0, 2))
itinerary = function(ctry, pdt, conn) {
# Filter for the matches in given ctry and arrange by date
country_matches <- wc_sched %>%
filter(ctry_a == ctry | ctry_b == ctry) %>%
arrange(match_dt)
print(country_matches)
# iterate through the matches, skipping the first match
for (i in 1:(nrow(country_matches) - 1)) {
dep_match <- country_matches[i, ]
arr_match <- country_matches[i + 1, ]
dep_airport <- get_airport(dep_match$lat, dep_match$lng)
arr_airport <- get_airport(arr_match$lat, arr_match$lng)
if (dep_airport == arr_airport) {
next
}
# Find best flight route based on connections
best_route <- find_connecting_flights(dep_airport, arr_airport, pdt[i], conn[i])
print(best_route)
# Calculate the departure and arrival dates
dep_date <- as.Date(dep_match$match_dt)
arr_date <- as.Date(dep_match$match_dt)
# Adjust the arrival date if the flight arrives after midnight
if (best_route$arr_time[1] < best_route$dep_time[1]) {
arr_date <- arr_date + 1
}
# Create itinerary for this leg and append it
leg_df <- data.frame(
flt = paste0(i, i+1),
leg = i,
dep = dep_airport,
arr = arr_airport,
dod = as.character(dep_date),
tod = best_route$dep_time[1],
doa = as.character(arr_date),
toa = best_route$arr_time[1],
distance = best_route$total_distance[1]
)
itinerary_df <- rbind(itinerary_df, leg_df)
}
return(itinerary_df)
}
# Helper function to get the nearest airport to a venue
get_airport = function(venue_lat, venue_lng) {
closest_idx <- which.min(
dist_mi(
venue_lat,
venue_lng,
wc_airports$lat,
wc_airports$lng
)
)
return(wc_airports$code[closest_idx])
}
# Helper function to get flights based on pdt_seq
get_flights = function(dep_airport, arr_airport, pdt_seg) {
flights <- wc_flights %>%
filter(orig == dep_airport & dest == arr_airport)
if (pdt_seg == 1) {
flights <- flights %>% filter(dep >= 0 & dep <= 759)
} else if (pdt_seg == 2) {
flights <- flights %>% filter(dep >= 800 & dep <= 1559)
} else {
flights <- flights %>% filter(dep >= 1600 & dep <= 2359)
}
return(flights)
}
# Helper function to find connecting flights
find_connecting_flights = function(dep_airport, arr_airport, pdt_seg, num_connections) {
if (num_connections == 0) {
return(get_flights(dep_airport, arr_airport, pdt_seg))
}
all_routes <- data.frame()
intermediate_airports <- unique(wc_flights$orig)
for (int_airport in intermediate_airports) {
if (int_airport != dep_airport && int_airport != arr_airport) {
# Get first leg flights
first_leg <- get_flights(dep_airport, int_airport, pdt_seg)
if (nrow(first_leg) > 0) {
for (j in seq_len(nrow(first_leg))) {
second_leg <- wc_flights %>%
filter(
orig == int_airport,
dest == arr_airport,
dep >= first_leg$arr[j] + 100
)
if (nrow(second_leg) > 0) {
for (k in seq_len(nrow(second_leg))) {
route <- data.frame(
dep = first_leg$orig[j],
arr = second_leg$dest[k],
dep_time = first_leg$dep[j],
arr_time = second_leg$arr[k],
total_distance = dist_mi(
wc_airports$lat[wc_airports$code == dep_airport],
wc_airports$lng[wc_airports$code == dep_airport],
wc_airports$lat[wc_airports$code == arr_airport],
wc_airports$lng[wc_airports$code == arr_airport]
)
)
all_routes <- bind_rows(all_routes, route)
}
}
}
}
}
}
# Sort by total distance and return best option
return(all_routes %>% arrange(total_distance) %>% slice(1))
}
our_itinerary = itinerary(ctry = our_country, pdt = c(1, 3), conn = c(0, 2))
itinerary = function(ctry, pdt, conn) {
# Filter for the matches in given ctry and arrange by date
country_matches <- wc_sched %>%
filter(ctry_a == ctry | ctry_b == ctry) %>%
arrange(match_dt)
print(country_matches)
# Empty itinerary data frame
itinerary_df <- data.frame()
# iterate through the matches, skipping the first match
for (i in 1:(nrow(country_matches) - 1)) {
dep_match <- country_matches[i, ]
arr_match <- country_matches[i + 1, ]
dep_airport <- get_airport(dep_match$lat, dep_match$lng)
arr_airport <- get_airport(arr_match$lat, arr_match$lng)
if (dep_airport == arr_airport) {
next
}
# Find best flight route based on connections
best_route <- find_connecting_flights(dep_airport, arr_airport, pdt[i], conn[i])
print(best_route)
# Calculate the departure and arrival dates
dep_date <- as.Date(dep_match$match_dt)
arr_date <- as.Date(dep_match$match_dt)
# Adjust the arrival date if the flight arrives after midnight
if (best_route$arr_time[1] < best_route$dep_time[1]) {
arr_date <- arr_date + 1
}
# Create itinerary for this leg and append it
leg_df <- data.frame(
flt = paste0(i, i+1),
leg = i,
dep = dep_airport,
arr = arr_airport,
dod = as.character(dep_date),
tod = best_route$dep_time[1],
doa = as.character(arr_date),
toa = best_route$arr_time[1],
distance = best_route$total_distance[1]
)
itinerary_df <- rbind(itinerary_df, leg_df)
}
return(itinerary_df)
}
# Helper function to get the nearest airport to a venue
get_airport = function(venue_lat, venue_lng) {
closest_idx <- which.min(
dist_mi(
venue_lat,
venue_lng,
wc_airports$lat,
wc_airports$lng
)
)
return(wc_airports$code[closest_idx])
}
# Helper function to get flights based on pdt_seq
get_flights = function(dep_airport, arr_airport, pdt_seg) {
flights <- wc_flights %>%
filter(orig == dep_airport & dest == arr_airport)
if (pdt_seg == 1) {
flights <- flights %>% filter(dep >= 0 & dep <= 759)
} else if (pdt_seg == 2) {
flights <- flights %>% filter(dep >= 800 & dep <= 1559)
} else {
flights <- flights %>% filter(dep >= 1600 & dep <= 2359)
}
return(flights)
}
# Helper function to find connecting flights
find_connecting_flights = function(dep_airport, arr_airport, pdt_seg, num_connections) {
if (num_connections == 0) {
return(get_flights(dep_airport, arr_airport, pdt_seg))
}
all_routes <- data.frame()
intermediate_airports <- unique(wc_flights$orig)
for (int_airport in intermediate_airports) {
if (int_airport != dep_airport && int_airport != arr_airport) {
# Get first leg flights
first_leg <- get_flights(dep_airport, int_airport, pdt_seg)
if (nrow(first_leg) > 0) {
for (j in seq_len(nrow(first_leg))) {
second_leg <- wc_flights %>%
filter(
orig == int_airport,
dest == arr_airport,
dep >= first_leg$arr[j] + 100
)
if (nrow(second_leg) > 0) {
for (k in seq_len(nrow(second_leg))) {
route <- data.frame(
dep = first_leg$orig[j],
arr = second_leg$dest[k],
dep_time = first_leg$dep[j],
arr_time = second_leg$arr[k],
total_distance = dist_mi(
wc_airports$lat[wc_airports$code == dep_airport],
wc_airports$lng[wc_airports$code == dep_airport],
wc_airports$lat[wc_airports$code == arr_airport],
wc_airports$lng[wc_airports$code == arr_airport]
)
)
all_routes <- bind_rows(all_routes, route)
}
}
}
}
}
}
# Sort by total distance and return best option
return(all_routes %>% arrange(total_distance) %>% slice(1))
}
our_itinerary = itinerary(ctry = our_country, pdt = c(1, 3), conn = c(0, 2))
our_itinerary
itinerary = function(ctry, pdt, conn) {
# Filter for the matches in given ctry and arrange by date
country_matches <- wc_sched %>%
filter(ctry_a == ctry | ctry_b == ctry) %>%
arrange(match_dt)
print(country_matches)
# Empty itinerary data frame
itinerary_df <- data.frame()
# iterate through the matches, skipping the first match
for (i in 1:(nrow(country_matches) - 1)) {
dep_match <- country_matches[i, ]
arr_match <- country_matches[i + 1, ]
dep_airport <- get_airport(dep_match$lat, dep_match$lng)
arr_airport <- get_airport(arr_match$lat, arr_match$lng)
if (dep_airport == arr_airport) {
next
}
# Find best flight route based on connections
best_route <- find_connecting_flights(dep_airport, arr_airport, pdt[i], conn[i])
print(best_route)
# Calculate the departure and arrival dates
dep_date <- as.Date(dep_match$match_dt)
arr_date <- as.Date(dep_match$match_dt)
# Adjust the arrival date if the flight arrives after midnight
if (best_route$arr_time[1] < best_route$dep_time[1]) {
arr_date <- arr_date + 1
}
# Create itinerary for this leg and append it
leg_df <- data.frame(
flt = paste0(i, i+1),
leg = i,
dep = dep_airport,
arr = arr_airport,
dod = as.character(dep_date),
tod = best_route$dep_time[1],
doa = as.character(arr_date),
toa = best_route$arr_time[1],
distance = best_route$total_distance[1]
)
itinerary_df <- rbind(itinerary_df, leg_df)
}
return(itinerary_df)
}
# Helper function to get the nearest airport to a venue
get_airport = function(venue_lat, venue_lng) {
closest_idx <- which.min(
dist_mi(
venue_lat,
venue_lng,
wc_airports$lat,
wc_airports$lng
)
)
return(wc_airports$code[closest_idx])
}
# Helper function to get flights based on pdt_seq
get_flights = function(dep_airport, arr_airport, pdt_seg) {
flights <- wc_flights %>%
filter(orig == dep_airport & dest == arr_airport)
if (pdt_seg == 1) {
flights <- flights %>% filter(dep >= 0 & dep <= 759)
} else if (pdt_seg == 2) {
flights <- flights %>% filter(dep >= 800 & dep <= 1559)
} else {
flights <- flights %>% filter(dep >= 1600 & dep <= 2359)
}
return(flights)
}
# Helper function to find connecting flights
find_connecting_flights = function(dep_airport, arr_airport, pdt_seg, num_connections) {
if (num_connections == 0) {
return(get_flights(dep_airport, arr_airport, pdt_seg))
}
all_routes <- data.frame()
intermediate_airports <- unique(wc_flights$orig)
for (int_airport in intermediate_airports) {
if (int_airport != dep_airport && int_airport != arr_airport) {
# Get first leg flights
first_leg <- get_flights(dep_airport, int_airport, pdt_seg)
if (nrow(first_leg) > 0) {
for (j in seq_len(nrow(first_leg))) {
second_leg <- wc_flights %>%
filter(
orig == int_airport,
dest == arr_airport,
dep >= first_leg$arr[j] + 100
)
if (nrow(second_leg) > 0) {
for (k in seq_len(nrow(second_leg))) {
route <- data.frame(
dep = first_leg$orig[j],
arr = second_leg$dest[k],
dep_time = first_leg$dep[j],
arr_time = second_leg$arr[k],
total_distance = dist_mi(
wc_airports$lat[wc_airports$code == dep_airport],
wc_airports$lng[wc_airports$code == dep_airport],
wc_airports$lat[wc_airports$code == arr_airport],
wc_airports$lng[wc_airports$code == arr_airport]
)
)
all_routes <- bind_rows(all_routes, route)
}
}
}
}
}
}
# Sort by total distance and return best option
return(all_routes %>% arrange(total_distance))
}
our_itinerary = itinerary(ctry = our_country, pdt = c(1, 3), conn = c(0, 2))
our_itinerary
